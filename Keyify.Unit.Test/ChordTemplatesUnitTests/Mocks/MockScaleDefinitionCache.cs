using EnumsNET;
using Keyify.MusicTheory.Definitions;
using Keyify.MusicTheory.Enums;
using Keyify.Services.Models;
using Microsoft.Extensions.Caching.Memory;
using System.Collections.Generic;
using System.Threading.Tasks;
using System;

public class MockScaleDefinitionCache : IMemoryCache
{
    private const string _generatedByDescription = $"Generated by {nameof(MockScaleDefinitionCache)}";
    private const string _scaleDefinitionsCacheKey = "ScaleDefinitions";

    public List<ScaleDefinition> ScaleDefinitions { get; set; } = new List<ScaleDefinition>();

    public ICacheEntry CreateEntry(object key)
    {
        throw new NotImplementedException();
    }

    public void Dispose()
    {
        throw new NotImplementedException();
    }

    public void Remove(object key)
    {
        throw new NotImplementedException();
    }

    public bool TryGetValue(object key, out object value)
    {
        if (key is string cacheKey && cacheKey == _scaleDefinitionsCacheKey)
        {
            value = ScaleDefinitions;
            return true;
        }

        value = null;
        return false;
    }

    public async Task InitializeCacheAsync()
    {
        ScaleDefinitions = await GenerateScaleDefinitions();
    }

    //TODO: Handle commented out types - use duplicate tests to identify duplicates, and create new table for "alternative aliases"
    private async Task<List<ScaleDefinition>> GenerateScaleDefinitions()
    {
        var scaleDegrees = ModeDefinitions.GetScaleDegrees();
        var scaleIntervals = ModeDefinitions.GetScaleIntervals();
        var explicitRootNotes = ModeDefinitions.GetExplicitRootNoteScaleRootNotes();

        var scaleDefinitions = new List<ScaleDefinition>();

        foreach (Mode scaleType in Enum.GetValues(typeof(Mode)))
        {
            var rootNotes = (Note[])Enum.GetValues(typeof(Note));

            explicitRootNotes.TryGetValue(scaleType, out rootNotes);

            var scaleEntry = new ScaleDefinition(scaleType.AsString(EnumFormat.Description), scaleIntervals[scaleType], scaleDegrees[scaleType], _generatedByDescription, explicitRootNotes[scaleType]);

            scaleDefinitions.Add(scaleEntry);
        }

        return await Task.FromResult(scaleDefinitions);
    }
}