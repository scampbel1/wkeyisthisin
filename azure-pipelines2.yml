#Copied from: https://github.com/CloudSkills/aspnet-core-docker-demo/blob/master/azure-pipelines.yaml
#Following tutorial: https://www.youtube.com/watch?v=272GOWKDqP4

trigger:
  branches:
    include: 
    - master
variables:
  buildConfiguration: 'Release'
  location: 'westeurope'
  acrHostName: 'keyifytestcicd.azurecr.io'
  acrName: 'keyifyTestCiCd'
  rgName: 'KeyifyCiCd'
  imageName: 'KeyifyWebAppTest-CI-CD-Image'
  webAppName: 'KeyifyWebAppTest-CI-CD'

stages:

# Build Stage
- stage: BuildAndTest
  jobs:
  - job: BuildAndTest
    pool:
      vmImage: 'windows-latest'
    steps:

    # Create or update the ACR resource
    #- task: AzureResourceGroupDeployment@2
    #  displayName: 'Azure Deployment:Create Azure Container Registry'
    #  inputs:
    #    azureSubscription: 'AzureSC'
    #    resourceGroupName: '$(rgName)'
    #    location: $(location)
    #    #csmFile: '$(System.DefaultWorkingDirectory)/**/containerRegistry-template.json'
    #    overrideParameters: '-webAppName "$(webAppName)" -hostingPlanName "$(webAppName)" -appInsightsLocation "$(location)" -registryName "$(acrName)" -registryLocation "$(location)" -registrySku Standard -imageName "$(imageName):$(Build.BuildId)"'
    
    - task: AzureResourceManagerTemplateDeployment@3
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: 'AzureSC'
        subscriptionId: 'a2fc1bcd-3446-47ea-9525-20f2a1a0de97'
        action: 'Create Or Update Resource Group'
        resourceGroupName: $(rgName)
        location: $(location)
        #templateLocation: 'Linked artifact'
        csmFile: '$(System.DefaultWorkingDirectory)/**/containerRegistry-template.json'
        #deploymentMode: 'Incremental'

    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: sdk
        version: 7.x
        installationPath: $(Agent.ToolsDirectory)/dotnet
  
    # Restore dependencies
    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: restore
        projects: '**/*.csproj'

    # Build app
    - task: DotNetCoreCLI@2
      displayName: 'dotnet build $(buildConfiguration)'
      inputs:
        command: build
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration)'

    # Run unit tests
    - task: DotNetCoreCLI@2
      displayName: Unit Tests
      inputs:
        command: test
        projects: '**/Keyify.Web.Unit.Test.csproj'
        arguments: '--configuration $(BuildConfiguration)'

    # Run controller unit tests
    - task: DotNetCoreCLI@2
      displayName: Controller Unit Tests
      inputs:
        command: test
        projects: '**/Keyify.Web.Controller.Unit.Test.csproj'
        arguments: '--configuration $(BuildConfiguration)'

    # Publish the app
    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish'
      inputs:
        command: publish
        publishWebProjects: True
        arguments: '--configuration $(BuildConfiguration) --output $(System.DefaultWorkingDirectory)'
        zipAfterPublish: false

    # Build container image
    - task: Docker@1
      displayName: 'Build container image'
      inputs:
        azureSubscriptionEndpoint: 'AzureSC'
        azureContainerRegistry: '$(acrHostName)'
        imageName: '$(imageName):$(Build.BuildId)'
        useDefaultContext: false
        buildContext: '$(System.DefaultWorkingDirectory)'
        pushMultipleImages: false

    # Push container image
    - task: Docker@1
      displayName: 'Push container image'
      inputs:
        azureSubscriptionEndpoint: 'AzureSC'
        azureContainerRegistry: '$(acrHostName)'
        command: 'Push an image'
        imageName: '$(imageName):$(Build.BuildId)'

    # Copy ARM templates
    - task: CopyFiles@2
      displayName: 'Copy ARM templates'
      inputs:
        SourceFolder: ArmTemplates
        TargetFolder: '$(build.artifactstagingdirectory)'

    # Publish the app as an artifact
    - publish: $(Build.StagingDirectory)
      artifact: app

# Staging release
- stage: Staging
  jobs:
  - job: Release
    pool:
      vmImage: 'windows-latest'
    steps:
    # Don't clone the repo
    - checkout: none

    # Download the published application artifact
    - download: current
      artifact: app

    # Create or update Azure App Service
    - task: AzureResourceGroupDeployment@2
      displayName: 'Azure Deployment:Create Azure App Service'
      inputs:
        azureSubscription: 'AzureSC'
        resourceGroupName: '$(rgName)'
        location: '$(location)'
        csmFile: '$(Pipeline.Workspace)/**/container-webapp-template.json'
        overrideParameters: '-webAppName $(webAppName) -hostingPlanName $(webAppName) -appInsightsLocation "$(location)" -sku "S1 Standard" -registryName $(acrName) -registryLocation "$(location)" -registrySku standard -imageName $(imageName):$(Build.BuildId)'

    # Deploy App Service
    - task: AzureRmWebAppDeployment@3
      displayName: 'Deploy Azure App Service'
      inputs:
        azureSubscription: 'AzureSC'
        appType: applinux
        WebAppName: $(webAppName)
        DockerNamespace: $(acrHostName)
        DockerRepository: $(webAppName)
        DockerImageTag: '$(Build.BuildId)'
        WebAppUri: webAppUrl
        TakeAppOfflineFlag: true
        UseWebDeploy: true
        RenameFilesFlag: true