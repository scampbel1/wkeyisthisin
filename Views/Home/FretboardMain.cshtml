@using KeyifyWebClient.Core.Models
@model FretboardWebModel

<head>
    <script lang="en" type="text/javascript">

        function ResetModel() {
            $.ajax({
                url: '@Url.Action("ResetModel")',
                datatype: 'json',
                async: 'false',
                contentType: "application/json",
                type: "POST",
                success: function (data) {
                    $("#Fretboard").html(data);
                }
            });
        }

        function UpdateModel(note, addNote, scale) {

            var dataPost = { notes: GenerateControllerMethodParams(note, addNote), scale: scale };
            
            //Note: Ensure that the ajax parameters are entirely neccessary
            //      https://stackoverflow.com/questions/2558870/asp-net-mvc-jquery-ajax-input-parameters-are-null
            $.ajax({
                url: '@Url.Action("UpdateFretboardModel")',
                async: 'false',
                type: "POST",
                data: dataPost,
                datatype: "json",
                success: function (data) {
                    $("#Fretboard").html(data);
                }
            });
        }

        function GenerateControllerMethodParams(note, addNote) {

            var noteArray = new Array();

            @foreach (var note in Model.SelectedNotes)
            {
                @:noteArray.push("@note");
            }

            if (note != null && note != '') {
                if (addNote === true) {
                    noteArray.push(note);
                }

                if (addNote === false) {
                    for (var i = 0; i < noteArray.length; i++) {
                        if (noteArray[i] === note) {
                            noteArray.splice(i, 1);
                        }
                    }
                }
            }

            return noteArray;
        }
    </script>
</head>

<body>
    <h1>Fretboard</h1>
    <table class="fretboard">
        <tr>
            @for (int count = 0; count < Model.GetFretCount(); count++)
            {
                if (count == 0)
                {
                    <th class="fretboardHeading"></th>
                    continue;
                }

                <th class="fretboardHeading">
                    @count
                </th>
            }
        </tr>

        @foreach (var instrumentString in Model.Fretboard.InstrumentStrings)
        {
            <tr>
                @foreach (var note in instrumentString.Notes)
                {
                    if (Model.SelectedScale != null)
                    {
                        if (note.InSelectedScale && note.Selected)
                        {
                            <td class="selectedNoteSelectedScale" onclick="UpdateModel('@note.Note', false, '@Model.SelectedScale?.ScaleName')">
                                @note.Note
                            </td>
                            continue;
                        }
                        else if (note.InSelectedScale && !note.Selected)
                        {
                            <td class="noteSelectedScale" onclick="UpdateModel('@note.Note', true, '@Model.SelectedScale?.ScaleName')">
                                @note.Note
                            </td>
                            continue;
                        }
                    }
                    if (note.Selected)
                    {
                        <td class="selectedNote" onclick="UpdateModel('@note.Note', false, '@Model.SelectedScale?.ScaleName')">
                            @note.Note
                        </td>
                        continue;
                    }

                    <td class="defaultNote" onclick="UpdateModel('@note.Note', true, '@Model.SelectedScale?.ScaleName')">
                        @note.Note
                    </td>
                }
            </tr>
        }
    </table>

    <div style="padding-left: 15px">
        <br />
        <button onclick="ResetModel()">Reset</button>
    </div>

    <div class="scaleResults">
        @if (Model.Scales.Any())
        {
            foreach (var scale in Model.Scales)
            {
                if (Model.Scales.Count == 1)
                {
                    <h2>Matching Keys</h2>
                    <span><b class="scaleResult" onclick="UpdateModel(null, false, '@scale.ScaleName')">@scale.ScaleName</b></span>
                    break;
                }
                if (Model.Scales.Last().Equals(scale))
                {
                    <span><b class="scaleResult" onclick="UpdateModel(null, false, '@scale.ScaleName')">@scale.ScaleName</b>.</span>
                }
                else if (Model.Scales.First().Equals(scale))
                {
                    <h2>Matching Keys</h2>
                    <span><b class="scaleResult" onclick="UpdateModel(null, false, '@scale.ScaleName')">@scale.ScaleName</b>, </span>
                }
                else
                {
                    <span><b class="scaleResult" onclick="UpdateModel(null, false, '@scale.ScaleName')">@scale.ScaleName</b>, </span>
                }
            }
        }
    </div>
</body>
